<local:LayoutAwarePage
    x:Class="App1.BlankPage1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:App1"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    Background="Lavender">

    <Grid x:Name="LayoutRoot" Background="White" HorizontalAlignment="Left" VerticalAlignment="Top">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <TextBlock TextWrapping="Wrap" Grid.Row="0" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
                The demonstration below shows how to use a SurfaceImageSource to include C++ DirectX content in a XAML application.
                Each time the button below is clicked a SurfaceImageSource is filled with randomly generated rectangles drawn using Direct2D.
                The XAML Image control and Ellipse shape below are then both filled using the SurfaceImageSource.
            </TextBlock>
            <Button Content="Draw rectangles with Direct2D" 
                    Grid.Row="1" Margin="0,10,0,10"
                    Background="AliceBlue"
                    Click="Scenario1DrawRectangles_Click" />
        </Grid>

        <StackPanel x:Name="Output" HorizontalAlignment="Left" 
                    VerticalAlignment="Top" Grid.Row="1" Orientation="Horizontal">
            <Border BorderBrush="Black" BorderThickness="2" Margin="0,0,10,0">
                <Image x:Name="Image1" Width="600" Height="600"/>
            </Border>
        </StackPanel>

        <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="DefaultLayout" />
                <VisualState x:Name="Below768Layout" />
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>
</local:LayoutAwarePage>
